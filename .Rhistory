// Gaussian kernel
// -----------------------------------------
//' Function that performs local linear regression
//' using Gaussian or Epanechnikov kernel.
//' @param X an nxk data matrix
//' @param y The nx1 output vector
//' @param H a kxk positive definite bandwidth matrix
//' @param Xeval an mxp matrix at which to predict using local linear regression
//' @param kernel integer; 1 for Gaussian, 2 for Epanechnikov
// [[Rcpp::export]]
Rcpp::List loclin_diffX_old(arma::mat const &X,
arma::vec const &y,
arma::mat const &H,
arma::mat const &Xeval,
int const &kernel,
int const nthr = 1) {
int nrows = X.n_rows, ncols = X.n_cols, neval = Xeval.n_rows;
arma::uvec colind = arma::regspace<arma::uvec>(1,1,ncols - 1);
arma::vec pred_vals(neval, arma::fill::zeros);
arma::vec ws(nrows, arma::fill::ones);
omp_set_num_threads(nthr);
// Perform Cholesky decomposition of H
arma::mat cholH = H;
if((ncols > 2) && (kernel==1)) {
cholH = arma::chol(H, "lower");
}
for(int i=0; i < neval; i++){
arma::rowvec x0 = Xeval.row(i);
// Determine weights using a multivariate Gaussian Kernel
if(kernel==1){
ws = sqrt(gausskern(X.cols(colind), x0(colind), cholH));
}
if(kernel==2){
ws = sqrt(epankern(X.cols(colind), x0(colind), cholH));
}
// Solve OLS using economical QR decomposition, scaling X and y by weights
arma::mat Q, R;
arma::qr_econ(Q, R, X.each_col() % ws);
arma::vec Qy(ncols, arma::fill::none);
arma::vec yw = y % ws;
for(int k = 0; k < ncols; k++){
Qy(k) = dot(Q.col(k), yw);
}
arma::vec beta = solve(R, Qy);
pred_vals(i) = arma::as_scalar(x0*beta);
}
List listout = List::create(Named("fitted.values") = pred_vals);
return listout;
}
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=1L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = 1
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=1L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = 1
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=1L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
Rcpp::sourceCpp('src/loo_loclin.cpp')
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=1L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=2L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
context("Test loo_loclin()")
library(looperr)
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=1L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=1L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
test_that("loo_loclin Correct LOO error, Gaussian Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=2L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=2L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
test_that("loo_loclin Correct LOO error, Uniform Kernel", {
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=3L)
loout = loclin_diffX(X[-looind,], y[-looind], matrix(h), Xloo, kernel=3L)
total_looer = total$loo_pred_err[looind]
loout_looer = y[looind]-as.vector(loout$fitted.values)
expect_equal(loout_looer, total_looer)
})
n = 200
X = cbind(rep(1, n),seq(1,10, length.out=n))
y = sin(X[,2]) + rnorm(n, sd=0.5)
h = runif(1, 0.1, 1)
looind = sample(1:n, size=1)
Xloo  = matrix(X[looind,], nrow=1, ncol=2)
total = loclin_sameX(X, y, matrix(h), kernel=3L)
plot(X[,2], total$fitted.values)
library(rccp)
library(Rcpp)
compileAttributes()
plot(X[,2], y)
library(looperr)
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
library(data.table)
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
results_R = fread("data-raw/results_R.csv")
results_S = fread("data-raw/results_stata.csv")
results = rbind(results_R, results_S)
results = merge(results, results_S[, c("seconds", "nObs", "nGroups")],
by=c("nObs", "nGroups"))
results[, relative_speed := seconds.y /seconds.x]
# Rename results
results[expr=="baseR", expr:="Base R loop with lm()"]
results[expr=="cpp_onecore", expr:="C++ One Thread"]
results[expr=="cpp_twocore", expr:="C++ Two Threads"]
results[expr=="cpp_threecore", expr:="C++ Three Threads"]
results[expr=="cpp_fourcore", expr:="C++ Four Threads"]
results[expr=="regressby", expr:="Stata regressby Two Threads"]
g = ggplot(results, aes(x=as.character(nObs), y=as.character(nGroups),
fill=relative_speed)) +
geom_tile(color="black") +
geom_text(aes(label=round(relative_speed,2)),fontface = "bold") +
scale_fill_gradientn(colours=c("white", "yellow", "orange", "orange","red"),
values=c(0, 0.05, 0.07, 0.4, 1)) +
facet_wrap(~expr) +
theme_minimal() +
theme(legend.position="none",
strip.text = element_text(size = 20),
axis.title = element_text(size=16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="Number of Observations Per Group",
y="Number of Groups")
library(ggplot2)
library(data.table)
results_R = fread("data-raw/results_R.csv")
results_S = fread("data-raw/results_stata.csv")
results = rbind(results_R, results_S)
results = merge(results, results_S[, c("seconds", "nObs", "nGroups")],
by=c("nObs", "nGroups"))
results[, relative_speed := seconds.y /seconds.x]
# Rename results
results[expr=="baseR", expr:="Base R loop with lm()"]
results[expr=="cpp_onecore", expr:="C++ One Thread"]
results[expr=="cpp_twocore", expr:="C++ Two Threads"]
results[expr=="cpp_threecore", expr:="C++ Three Threads"]
results[expr=="cpp_fourcore", expr:="C++ Four Threads"]
results[expr=="regressby", expr:="Stata regressby Two Threads"]
g = ggplot(results, aes(x=as.character(nObs), y=as.character(nGroups),
fill=relative_speed)) +
geom_tile(color="black") +
geom_text(aes(label=round(relative_speed,2)),fontface = "bold") +
scale_fill_gradientn(colours=c("white", "yellow", "orange", "orange","red"),
values=c(0, 0.05, 0.07, 0.4, 1)) +
facet_wrap(~expr) +
theme_minimal() +
theme(legend.position="none",
strip.text = element_text(size = 20),
axis.title = element_text(size=16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="Number of Observations Per Group",
y="Number of Groups")
g
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
rm(list=ls())
gc()
library(data.table)
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
library(looperr)
rm(list=ls())
gc()
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
library(ggplot2)
library(data.table)
results_R = fread("data-raw/results_R.csv")
results_S = fread("data-raw/results_stata.csv")
results = rbind(results_R, results_S)
results = merge(results, results_S[, c("seconds", "nObs", "nGroups")],
by=c("nObs", "nGroups"))
results[, relative_speed := seconds.y /seconds.x]
# Rename results
results[expr=="baseR", expr:="Base R loop with lm()"]
results[expr=="cpp_onecore", expr:="C++ One Thread"]
results[expr=="cpp_twocore", expr:="C++ Two Threads"]
results[expr=="cpp_threecore", expr:="C++ Three Threads"]
results[expr=="cpp_fourcore", expr:="C++ Four Threads"]
results[expr=="regressby", expr:="Stata regressby Two Threads"]
g = ggplot(results, aes(x=as.character(nObs), y=as.character(nGroups),
fill=relative_speed)) +
geom_tile(color="black") +
geom_text(aes(label=round(relative_speed,2)),fontface = "bold") +
scale_fill_gradientn(colours=c("white", "yellow", "orange", "orange","red"),
values=c(0, 0.05, 0.07, 0.4, 1)) +
facet_wrap(~expr) +
theme_minimal() +
theme(legend.position="none",
strip.text = element_text(size = 20),
axis.title = element_text(size=16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="Number of Observations Per Group",
y="Number of Groups")
g
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking_plots.R', echo=TRUE)
Rcpp::sourceCpp('src/loo_linear.cpp')
Rcpp::sourceCpp('src/loo_linear.cpp')
n=1000
grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g))
microbenchmark::microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g))
microbenchmark::microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g), times=5
)
microbenchmark::microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g), times=10)
grps = 10000
microbenchmark::microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g), times=10)
grps = 100000
grps = 10000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
microbenchmark::microbenchmark(fastols_by(X,y,w,g), fastols_by2(X,y,w,g), times=10)
microbenchmark::microbenchmark(fastols_by(X,y,w,g, nthr=2), fastols_by2(X,y,w,g, nthr=2), times=10)
sessionInfo()
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
gc()
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking_plots.R', echo=TRUE)
g
sessionInfo()
extSoftVersion()["BLAS"]
extSoftVersion()["LAPACK"]
R.home()
benchmark(X%*%X)
microbenchmark(X%*%X)
microbenchmark::microbenchmark(X%*%X)
microbenchmark::microbenchmark(crossprod(X,X))
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(X%*%X)
microbenchmark::microbenchmark(crossprod(X,X))
microbenchmark::microbenchmark(crossprod(X,X))
microbenchmark::microbenchmark(crossprod(X,X))
sessionInfo()
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
# Simulate values
n=1000; grps=1000
X = cbind(rep(1, n*grps), rnorm(n*grps))
w = rep(1, grps*n)
g = rep(1:grps, each=n)
y = rnorm(1)*X[,2] + rnorm(n*grps, sd=0.5)
ord = order(g, X[,2])
X = X[ord,]
g = g[ord]
y = y[ord]
microbenchmark::microbenchmark(crossprod(X,X))
rm(list=ls())
gc()
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking.R', echo=TRUE)
library(data.table)
library(ggplot2)
library(scales)
# Load results =================================================================
results_R = fread("data-raw/results_R.csv")
results_S = fread("data-raw/results_stata.csv")
# Merge results and calculate relative speed ===================================
results = rbind(results_R, results_S)
results = merge(results, results_S[, c("seconds", "nObs", "nGroups")],
by=c("nObs", "nGroups"))
results[, relative_speed := seconds.y /seconds.x]
# Rename results ===============================================================
results[expr=="baseR", expr:="Base R loop with lm()"]
results[expr=="cpp_onecore", expr:="C++ One Thread"]
results[expr=="cpp_twocore", expr:="C++ Two Threads"]
results[expr=="cpp_threecore", expr:="C++ Three Threads"]
results[expr=="cpp_fourcore", expr:="C++ Four Threads"]
results[expr=="regressby", expr:="Stata regressby Four Threads"]
# Plot results =================================================================
g = ggplot(results, aes(x=as.character(nObs), y=as.character(nGroups),
fill=relative_speed)) +
geom_tile(color="black") +
geom_text(aes(label=round(relative_speed,2)),fontface = "bold") +
scale_fill_gradientn(colours=c("white", "yellow", "orange","red"),
values=rescale(c(1,5,18,200), from=c(min(results$relative_speed), max(results$relative_speed)))) +
facet_wrap(~expr) +
theme_minimal() +
theme(legend.position="none",
strip.text = element_text(size = 20),
axis.title = element_text(size=16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="Number of Observations Per Group",
y="Number of Groups")
g
source('C:/Users/hab737/GitHub/looperr/examples/benchmarking_plots.R', echo=TRUE)
